#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -o errexit
set -o pipefail
set -o nounset
unset GIT_DIR

ASE_DIR="$(pwd)"
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

source "$BP_DIR/bin/lib/utils.sh"

declare herokuos_version framework_version runtime_framework_version

herokuos_version="$(get_linux_platform_version)"
framework_version="$(get_framework_version $BUILD_DIR)"
runtime_framework_version="$(get_runtime_framework_version $BUILD_DIR)"


info "Installing prerequisites for .NET Core on Ubuntu"

if [[ $herokuos_version == "18.04" ]]; then
	apt_install libicu60 openssl1.0
elif [[ $herokuos_version == "19.04" ]]; then
	apt_install libicu63 libssl1.1
else
	apt_install libicu55
fi


info "Installing dotnet sdk"

export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

$BP_DIR/bin/lib/dotnet_install.sh --channel $framework_version --version $runtime_framework_version --install-dir $BUILD_DIR/.dotnet

if [[ $BUILD_DIR != '/app' ]]; then
	ln -s ${BUILD_DIR}/.dotnet $HOME
fi

export PATH="$PATH:$HOME/.dotnet"

PROFILE_PATH="$BUILD_DIR/.profile.d/dotnetcore.sh"
mkdir -p $(dirname $PROFILE_PATH)

echo 'export PATH="$PATH:$HOME/.dotnet:$HOME/.apt/usr/bin"' >> $PROFILE_PATH
echo 'export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/.apt/usr/lib/i386-linux-gnu:$HOME/.apt/usr/lib"' >> $PROFILE_PATH
echo 'export LIBRARY_PATH="$LIBRARY_PATH:$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/.apt/usr/lib/i386-linux-gnu:$HOME/.apt/usr/lib"' >> $PROFILE_PATH
echo 'export INCLUDE_PATH="$INCLUDE_PATH:$HOME/.apt/usr/include"' >> $PROFILE_PATH
echo 'export CPATH="$INCLUDE_PATH"' >> $PROFILE_PATH
echo 'export CPPPATH="$INCLUDE_PATH"' >> $PROFILE_PATH
echo "export DOTNET_CLI_TELEMETRY_OPTOUT=1" >> $PROFILE_PATH

PROJECT_FILE="$(get_project_file $BUILD_DIR)"
APP_ASSEMBLY="$(get_project_name $BUILD_DIR)"

dotnet publish $PROJECT_FILE --output $BUILD_DIR/$APP_ASSEMBLY --configuration Release --runtime linux-x64

cd $BUILD_DIR
find -maxdepth 1 ! -name .profile.d ! -name .apt ! -name .dotnet ! -name node_modules ! -name $APP_ASSEMBLY  -exec rm -rv {} \; > /dev/null 2>&1;

cat << EOT >> ${BUILD_DIR}/Procfile
worker: cd \$HOME/$APP_ASSEMBLY && dotnet "./$APP_ASSEMBLY.dll"
EOT

